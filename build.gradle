plugins {
	id 'java' // Applies the Java plugin for building Java applications.
	id 'org.springframework.boot' version "${springBootVersion}" // Spring Boot plugin for application setup and deployment.
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}" // Handles Spring's dependency versions via BOM.
	id 'jvm-test-suite' // Enables separation of unit and integration tests into test suites.
	id 'jacoco' // Generates code coverage reports for tests.
	id "jacoco-report-aggregation" // Aggregates coverage reports across multiple test suites.
	id "test-report-aggregation" // Aggregates test result reports across suites.
	id 'checkstyle' // Enforces code style with Checkstyle.
	id 'org.sonarqube' version "${sonarqubeVersion}" // Integrates SonarQube for static code analysis.
	id 'idea' // Configures IntelliJ IDEA project settings.
}

group = 'com.logistics'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

// Testing suite must be defined before the below configuration block to
// avoid naming conflicts (e.g. integrationTestImplementation) since the
// integrationTest defines sources.
testing {
	suites {
		// Applies common configurations to all test suites.
		configureEach {
			useJUnitJupiter()
			dependencies {
				implementation 'org.springframework.boot:spring-boot-starter-test'
				implementation 'org.springframework.security:spring-security-test'
				implementation "io.github.hakky54:logcaptor:${logcaptorVersion}"
				runtimeOnly 'org.junit.platform:junit-platform-launcher'
			}
		}

		// Unit test suite (default `test` task).
		test {
			dependencies {
				implementation 'com.h2database:h2' // H2 in-memory database for lightweight unit testing.
			}

			targets {
				configureEach {
					testTask.configure {
						// Generates HTML reports for unit tests.
						reports {
							html.setRequired(true)
							html.outputLocation = layout.buildDirectory.dir("reports/tests/unitTest")
						}
					}
				}
			}

		}

		// Integration test suite.
		integrationTest(JvmTestSuite) {
			testType = TestSuiteType.INTEGRATION_TEST

			dependencies {
				implementation 'org.postgresql:postgresql' // PostgreSQL database for integration testing.
			}


			sources {
				// Ensures integration tests can access application classes.
				compileClasspath += sourceSets.main.output

				// Ensures access to runtime classes/resources.
				runtimeClasspath += sourceSets.main.output
			}

			targets {
				configureEach {
					testTask.configure {
						mustRunAfter(test)
					}
				}
			}
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor // Allows annotation processing tools like Lombok.
	}

	// Shares test and runtime libraries between unit and integration tests.
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// Libraries for configuration and security.
	implementation "io.github.cdimascio:dotenv-java:${dotenvJavaVersion}" // .env file support.
	implementation "io.jsonwebtoken:jjwt:${jjwtVersion}" // JWT library for token-based authentication.

	// Compile-time tools
	compileOnly 'org.projectlombok:lombok' // Reduces boilerplate with Lombok annotations.
	annotationProcessor 'org.projectlombok:lombok'

	// Development-only dependencies
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Runtime dependencies
	runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}" // PostgreSQL JDBC driver.

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}"
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs << '-parameters' // Preserve parameter names in the compiled class files
}

tasks.testCodeCoverageReport {
	// Allow CI workflow to bypass dependency so tests are not rerun
	if (!project.hasProperty('ci')) {
		mustRunAfter(testing.suites.test, testing.suites.integrationTest)
	}
	// Aggregates code coverage reports from unit and integration tests.
	executionData.from(
			configurations.aggregateCodeCoverageReportResults.incoming.artifactView {
				lenient = true
				withVariantReselection()
				attributes {
					attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "verification"))
					attribute(TestSuiteType.TEST_SUITE_TYPE_ATTRIBUTE, objects.named(TestSuiteType, "integration-test"))
					attribute(VerificationType.VERIFICATION_TYPE_ATTRIBUTE, objects.named(VerificationType, "jacoco-results"))
					attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.BINARY_DATA_TYPE)
				}
			}.files
	)
}

tasks.testAggregateTestReport {
	// Allow CI workflow to bypass dependency so tests are not rerun
	if (!project.hasProperty('ci')) {
		mustRunAfter(testing.suites.test, testing.suites.integrationTest)
	}
	// Aggregates test results reports from unit and integration tests.
	testResults.from(
			configurations.aggregateTestReportResults.incoming.artifactView {
				lenient = true
				withVariantReselection()
				attributes {
					attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "verification"))
					attribute(TestSuiteType.TEST_SUITE_TYPE_ATTRIBUTE, objects.named(TestSuiteType, "integration-test"))
					attribute(VerificationType.VERIFICATION_TYPE_ATTRIBUTE, objects.named(VerificationType, "test-results"))
				}
			}.files
	)

	// Specify output directory for aggregated test reports to improve organization.
	destinationDirectory.set(file(layout.buildDirectory.dir("reports/tests/aggregatedTest")))
}

tasks.check {
	dependsOn(tasks.testAggregateTestReport)
	dependsOn(tasks.testCodeCoverageReport)
	dependsOn(tasks.jacocoTestCoverageVerification)
}

tasks.withType(Checkstyle).configureEach {
	reports {
		xml.setRequired(false)
		html.setRequired(true)
	}
}

// Configure IntelliJ IDEA to mark integration test directory as a test source
idea {
	module {
		testSources.from(file("src/integrationTest/java"))
		testResources.from(file("src/integrationTest/resources"))
	}
}

jacoco {
	toolVersion = "${jacocoVersion}"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9 // Require 90% coverage
			}
		}
	}
}

checkstyle {
	toolVersion = "${checkstyleVersion}"
	configFile = file('config/checkstyle/google_checks.xml')
}

sonarqube {
	properties {
		property("sonar.projectKey", "ajmiller611_military-logistics-mgmt")
		property("sonar.organization", "ajmiller611")
		property("sonar.host.url", "https://sonarcloud.io")
		property("sonar.token", System.getenv("SONAR_TOKEN"))
	}
}