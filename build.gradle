plugins {
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// JSON Web Token library
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// Compile-time only dependencies
	compileOnly 'org.projectlombok:lombok'

	// Development-only dependencies
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Runtime dependencies
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// Annotation processors
	annotationProcessor 'org.projectlombok:lombok'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.withType(Checkstyle).configureEach {
	reports {
		xml.required = false // Disable XML report generation
		html.required = true // Enable HTML report generation
	}
}

checkstyle {
	toolVersion = '10.20.0'
	configFile = file('config/checkstyle/google_checks.xml')
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test // Ensure tests run before generating the report
	reports {
		xml.required = true
		html.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("reports/jacoco/html")
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco/report.xml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}