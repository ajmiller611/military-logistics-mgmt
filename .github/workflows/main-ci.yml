# Continuous Integration Workflow for Military Logistics Management Application
name: CI Workflow

# Trigger the workflow on push and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Set up the jobs to perform
jobs:
  # Set up the environment, build the application, and run the tests.
  build:
    runs-on: ubuntu-latest
    env:
      FRONTEND_ORIGIN: ${{ secrets.FRONTEND_ORIGIN }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    # Set up a service container to host the PostgreSQL database.
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        # Run a health check to make sure the database is available.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Fetch all branch references for Sonar scan.
    - name: Fetch all branches
      run: git fetch --unshallow

    # Set up the JDK for the Spring Boot Application
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Run Unit Tests with H2 Database
    - name: Run Unit Tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test

    # Run Integration Tests with PostgreSQL database
    - name: Run Integration Tests
      run: ./gradlew integrationTest
      env:
        SPRING_PROFILES_ACTIVE: integration
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
        SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}

    # Run the linter
    - name: Run Checkstyle
      run: |
        ./gradlew checkStyleMain
        ./gradlew checkStyleTest
        ./gradlew checkStyleIntegrationTest

    # Generate Code Coverage Report
    - name: Generate Coverage Report
      run: ./gradlew testCodeCoverageReport -Pci

    # Generate Aggregated Test Results Report
    - name: Generate Aggregated Test Results Report
      run: ./gradlew testAggregateTestReport -Pci

    # Upload Test Results for Unit, Integration, and Aggregated Tests
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          build/reports/tests/unitTest
          build/reports/tests/integrationTest
          build/reports/tests/aggregatedTest

    # Run Sonar analysis tool
    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew sonar

    # Coverage was run during the build so upload the report
    - name: Upload JaCoCo Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-report
        path: build/reports/jacoco/testCodeCoverageReport/html